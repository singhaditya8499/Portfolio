{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/Introduction-to-Kotlin/","result":{"data":{"markdownRemark":{"html":"<h1>Kotlin</h1>\n<ul>\n<li>Kotlin is a statically typed programming language</li>\n<li>Officially supported language by Google for android</li>\n</ul>\n<h3>Core features of Kotlin:</h3>\n<ol>\n<li><strong>Concise</strong>: Reduces the amount of boilerplate code</li>\n<li><strong>Safe:</strong> Avoid NullPointerException</li>\n<li><strong>Interoperable</strong>: Use existing libraries of Java, Android, etc</li>\n<li><strong>Tool friendly</strong>: Use any existing IDE</li>\n</ol>\n<h3>Hello world!</h3>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">fun</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello world!\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>Variables</h3>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token operator\">..</span><span class=\"token punctuation\">.</span>\n<span class=\"token keyword\">val</span> a <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello\"</span> <span class=\"token comment\">//type inference</span>\n<span class=\"token keyword\">val</span> a<span class=\"token operator\">:</span> Double <span class=\"token operator\">=</span> <span class=\"token number\">23.44</span> \n<span class=\"token operator\">..</span><span class=\"token punctuation\">.</span></code></pre></div>\n<h3>val vs var</h3>\n<ul>\n<li>val is value and var is variable</li>\n<li>val is nothing but a final value(like Java) which can not be reassigned.</li>\n<li>var can be reassigned.</li>\n<li>Can not change the type of a var. It is bounded by its defined type.</li>\n<li>We can use lateinit to initialise var later.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token operator\">..</span><span class=\"token punctuation\">.</span>\n<span class=\"token keyword\">lateinit</span> <span class=\"token keyword\">var</span> a<span class=\"token operator\">:</span> String<span class=\"token punctuation\">;</span>\n<span class=\"token operator\">..</span><span class=\"token punctuation\">.</span>\n\na <span class=\"token operator\">=</span> <span class=\"token string\">\"Aditya\"</span>\n<span class=\"token operator\">..</span><span class=\"token punctuation\">.</span></code></pre></div>\n<ul>\n<li>We can not set a null value to a var. We need to use ? operator. This is due to strong null safety check which comes attached with Kotlin.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token operator\">..</span><span class=\"token punctuation\">.</span>\n<span class=\"token keyword\">var</span> a<span class=\"token operator\">:</span> String<span class=\"token operator\">?</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">..</span><span class=\"token punctuation\">.</span></code></pre></div>\n<ul>\n<li>To get a NPE for a var in Kotlin, we need to use !! operator. It makes sure that we receive NPE if it occurs.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token operator\">..</span><span class=\"token punctuation\">.</span>\n<span class=\"token keyword\">var</span> a<span class=\"token operator\">:</span> String<span class=\"token operator\">?</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span>\n<span class=\"token operator\">..</span><span class=\"token punctuation\">.</span>\n\n<span class=\"token keyword\">val</span> size<span class=\"token operator\">:</span> Int <span class=\"token operator\">=</span> a<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span>length<span class=\"token operator\">!!</span>  <span class=\"token comment\">//throws NPE</span></code></pre></div>\n<ul>\n<li>We have and elvis operator in Kotlin which is similar to conditional operator. (?:)</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token operator\">..</span><span class=\"token punctuation\">.</span>\n<span class=\"token keyword\">var</span> a<span class=\"token operator\">:</span> String<span class=\"token operator\">?</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span>\n<span class=\"token operator\">..</span><span class=\"token punctuation\">.</span>\n\n<span class=\"token keyword\">val</span> size<span class=\"token operator\">:</span> Int <span class=\"token operator\">=</span> a<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span>length <span class=\"token operator\">?:</span> <span class=\"token number\">0</span>   <span class=\"token comment\">//returns 0 if a.length is null</span></code></pre></div>\n<ul>\n<li>If we need to concatenate a string to another, there is a smart way to do it in kotlin</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token operator\">..</span><span class=\"token punctuation\">.</span>\n<span class=\"token keyword\">var</span> a<span class=\"token operator\">:</span> String <span class=\"token operator\">=</span> <span class=\"token string\">\"Aditya\"</span>\n<span class=\"token function\">println</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">+</span> <span class=\"token string\">\"Singh\"</span><span class=\"token punctuation\">)</span>    <span class=\"token comment\">//prints Aditya Singh</span>\n\n<span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"<span class=\"token interpolation variable\">$a</span> Singh\"</span><span class=\"token punctuation\">)</span>     <span class=\"token comment\">//prints Aditya Singh</span>\n<span class=\"token operator\">..</span><span class=\"token punctuation\">.</span></code></pre></div>\n<h3>Arrays</h3>\n<ul>\n<li>We can define array in following ways:</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">val</span> a <span class=\"token operator\">=</span> <span class=\"token function\">arrayOf</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"Aditya\"</span><span class=\"token punctuation\">)</span>   \n<span class=\"token comment\">/*\narrayOf() uses vararg underneath which tells that we can have n arguements \ninside a function.\n*/</span>\n<span class=\"token keyword\">val</span> a <span class=\"token operator\">=</span> arrayOf<span class=\"token operator\">&lt;</span>Int<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">/*\nThis will bind our array with Int type. We cant add any other variable of any\nother type inside it.\n*/</span>\n<span class=\"token keyword\">val</span> num <span class=\"token operator\">=</span> <span class=\"token function\">Array</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>i <span class=\"token operator\">-></span> i<span class=\"token operator\">*</span><span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>    <span class=\"token comment\">//0 1 2 3 4</span>\n<span class=\"token comment\">/*\nUsing Array constructor\n*/</span>\n\n<span class=\"token function\">println</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">println</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h3>Collections</h3>\n<ul>\n<li>By default in kotlin list is immutable</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token operator\">..</span><span class=\"token punctuation\">.</span>\n<span class=\"token keyword\">val</span> myList <span class=\"token operator\">=</span> listOf<span class=\"token operator\">&lt;</span>String<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"World\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"Aditya\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">..</span><span class=\"token punctuation\">.</span>\n\nmyList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"India\"</span><span class=\"token punctuation\">)</span>    <span class=\"token comment\">//cant do that as there is no function add()</span></code></pre></div>\n<ul>\n<li>If we want to add items we need to explicitly define it as mutable. We can use arrayListOf() also in place of mutableListOf().</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token operator\">..</span><span class=\"token punctuation\">.</span>\n<span class=\"token keyword\">val</span> myList <span class=\"token operator\">=</span> mutableListOf<span class=\"token operator\">&lt;</span>String<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"World\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">..</span><span class=\"token punctuation\">.</span>\n\nmyList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Aditya\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n<ul>\n<li>Maps are immutable.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token operator\">..</span><span class=\"token punctuation\">.</span>\n<span class=\"token keyword\">val</span> myMap <span class=\"token operator\">=</span> mapOf<span class=\"token operator\">&lt;</span>Int<span class=\"token punctuation\">,</span>String<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token keyword\">to</span> <span class=\"token string\">\"Aditya\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span> <span class=\"token keyword\">to</span> <span class=\"token string\">\"Singh\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">..</span><span class=\"token punctuation\">.</span>\n\n<span class=\"token function\">println</span><span class=\"token punctuation\">(</span>myMap<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>    <span class=\"token comment\">//this will print \"Aditya\"</span>\n\n<span class=\"token keyword\">val</span> myMap <span class=\"token operator\">=</span> <span class=\"token function\">mapOf</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token keyword\">to</span> <span class=\"token string\">\"Aditya\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"surname\"</span> <span class=\"token keyword\">to</span> <span class=\"token string\">\"Singh\"</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\">//to use different keys</span></code></pre></div>\n<ul>\n<li>If we want mutable map, we use hash map.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token operator\">..</span><span class=\"token punctuation\">.</span>\n<span class=\"token keyword\">val</span> myMap <span class=\"token operator\">=</span> <span class=\"token function\">hashMapOf</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token keyword\">to</span> <span class=\"token string\">\"Aditya\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"surname\"</span> <span class=\"token keyword\">to</span> <span class=\"token string\">\"Singh\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">..</span><span class=\"token punctuation\">.</span>\n\nmyMap<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"country\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"India\"</span><span class=\"token punctuation\">)</span>     <span class=\"token comment\">//add a new key value pair</span>\nmyMap<span class=\"token punctuation\">[</span><span class=\"token string\">\"country\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"India\"</span>        <span class=\"token comment\">//we can do something like this as well</span></code></pre></div>\n<h3>Loops</h3>\n<ul>\n<li><strong>Foreach</strong> loops works with list, array, map. It iterates over the entire set of items and give the output.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">val</span> myList <span class=\"token operator\">=</span> listOf<span class=\"token operator\">&lt;</span>String<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"World\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"Aditya\"</span><span class=\"token punctuation\">)</span>\n\nmyList<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>it <span class=\"token operator\">-></span> <span class=\"token function\">println</span><span class=\"token punctuation\">(</span>it<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\">//prints all items</span></code></pre></div>\n<ul>\n<li>for loop</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>name <span class=\"token keyword\">in</span> listOfNames<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">println</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span>           <span class=\"token comment\">//print every item in list</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span> x <span class=\"token keyword\">in</span> <span class=\"token number\">0</span><span class=\"token operator\">..</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">println</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>       <span class=\"token comment\">//prints all value from 0 to 10 inclusive</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span> x <span class=\"token keyword\">in</span> <span class=\"token number\">0</span> until <span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">println</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>       <span class=\"token comment\">//prints all value from 0 to 10, excludes 10</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span> x <span class=\"token keyword\">in</span> <span class=\"token number\">0</span> until <span class=\"token number\">10</span> step <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">println</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>       <span class=\"token comment\">//prints 0 3 6 9</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span> x <span class=\"token keyword\">in</span> <span class=\"token number\">10</span> downTo <span class=\"token number\">0</span> step <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">println</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>       <span class=\"token comment\">//prints 10 7 4 1</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>Keywords</h3>\n<ul>\n<li><code class=\"language-text\">in</code> is check inclusiveness</li>\n</ul>\n<h3>When</h3>\n<ul>\n<li>It is similar to switch statement of C++. We dont iterate over all the condition like we do in if-else.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token operator\">..</span><span class=\"token punctuation\">.</span>\n<span class=\"token keyword\">var</span> a<span class=\"token operator\">:</span>String <span class=\"token operator\">=</span> <span class=\"token string\">\"Aditya\"</span>\n\n<span class=\"token keyword\">when</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token string\">\"Aditya\"</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Aditya\"</span><span class=\"token punctuation\">)</span>     <span class=\"token comment\">//will print this</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token string\">\"Singh\"</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Singh\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Other\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token operator\">..</span><span class=\"token punctuation\">.</span></code></pre></div>\n<ul>\n<li>When can return a value as well.</li>\n</ul>\n<h3>Functions</h3>\n<ul>\n<li>The structure of functions is very similar to C++ or Java.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">fun</span> <span class=\"token function\">functionName</span><span class=\"token punctuation\">(</span>variable<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> String <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token string\">\"<span class=\"token interpolation variable\">$variable</span> was passed\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>\n<p>Types of arguements:</p>\n<ul>\n<li><strong>Positional arguments:</strong> Arguments are passed in the order they are declared in the function definitions</li>\n<li><strong>Default arguments:</strong> There can be default values defined as an argument. We can choose not to pass it as a parameter. Function will pick up the default value.</li>\n<li><strong>Named arguments:</strong> These are special in kotlin. We can send parameter in any order, just specifying the name</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token operator\">..</span><span class=\"token punctuation\">.</span>\n<span class=\"token function\">callFun</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span><span class=\"token string\">\"Aditya\"</span><span class=\"token punctuation\">,</span> age<span class=\"token operator\">=</span><span class=\"token number\">22</span><span class=\"token punctuation\">,</span> company<span class=\"token operator\">=</span><span class=\"token string\">\"Amazon\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">fun</span> <span class=\"token function\">callFun</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span> age<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">,</span> company<span class=\"token operator\">:</span> String<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">//do something</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>If we are not sure of number of argument to pass, we can use <em>vararg.</em></li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token operator\">..</span><span class=\"token punctuation\">.</span>\n<span class=\"token function\">callFunction</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">fun</span> <span class=\"token function\">callFunction</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">vararg</span> number<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">println</span><span class=\"token punctuation\">(</span>number<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>num <span class=\"token keyword\">in</span> number<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">prinln</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token operator\">..</span><span class=\"token punctuation\">.</span></code></pre></div>\n<h3>Class</h3>\n<ul>\n<li>Similar to classes in C++</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">class</span> User <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">var</span> name<span class=\"token operator\">:</span> String <span class=\"token operator\">=</span> <span class=\"token string\">\"Aditya\"</span>\n\t<span class=\"token keyword\">var</span> age<span class=\"token operator\">:</span> Int <span class=\"token operator\">=</span> <span class=\"token number\">22</span>\n\n\t<span class=\"token keyword\">fun</span> <span class=\"token function\">getAge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Int <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> age\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">fun</span> <span class=\"token function\">assignValue</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">:</span>String<span class=\"token punctuation\">,</span> age<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li><em>this</em> keyword is used to access members of current class. It points to the current class present in scope.</li>\n<li>\n<p>Constructor are used to initialise the members of a class. There are 2 types of constructors:</p>\n<ul>\n<li>Primary constructor (We can have only one primary constructor in a class)</li>\n<li>Secondary constructor (We can have multiple secondary constructor in a class</li>\n</ul>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">class</span> <span class=\"token function\">User</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> name<span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span> <span class=\"token keyword\">var</span> age<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">var</span> name<span class=\"token operator\">:</span> String\n\t<span class=\"token keyword\">var</span> age<span class=\"token operator\">:</span> Int\n\n\t<span class=\"token keyword\">fun</span> <span class=\"token function\">getAge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Int <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> age\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">fun</span> <span class=\"token function\">assignValue</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">:</span>String<span class=\"token punctuation\">,</span> age<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token operator\">..</span><span class=\"token punctuation\">.</span>\n\n<span class=\"token keyword\">val</span> user <span class=\"token operator\">=</span> <span class=\"token function\">User</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Aditya\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">22</span><span class=\"token punctuation\">)</span></code></pre></div>\n<ul>\n<li>We can use init block as well as a constructor</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">class</span> <span class=\"token function\">User</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span> age<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">var</span> name<span class=\"token operator\">:</span> String\n\t<span class=\"token keyword\">var</span> age<span class=\"token operator\">:</span> Int\n\t<span class=\"token keyword\">init</span> <span class=\"token punctuation\">{</span>\n\t\tname <span class=\"token operator\">=</span> name\n\t\tage <span class=\"token operator\">=</span> age\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">fun</span> <span class=\"token function\">getAge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Int <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> age\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">fun</span> <span class=\"token function\">assignValue</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">:</span>String<span class=\"token punctuation\">,</span> age<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>There can be multiple secondary constructor.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">class</span> <span class=\"token function\">User</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span> age<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">var</span> name<span class=\"token operator\">:</span> String\n\t<span class=\"token keyword\">var</span> age<span class=\"token operator\">:</span> Int\n\t<span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">:</span> String<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name\n\t\tage <span class=\"token operator\">=</span> <span class=\"token number\">22</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span> age<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>Kotlin Java interoperability</h3>\n<ul>\n<li>Kotlin is compiled as Java when present in backend java project.</li>\n<li>\n<p>We can see the equivalent java code by following procedure:</p>\n<ul>\n<li>We need to check the kotlin bytecode i.e. the code which machine understands</li>\n<li>We can decompile the bytecode, which reverse engineers it java (source does'nt matter)</li>\n</ul>\n</li>\n<li>No need to add getter and setter in kotlin, it automatically does that for us.</li>\n</ul>","frontmatter":{"title":"Introduction to Kotlin","author":"Aditya Singh","date":"29 June, 2021"},"excerpt":"Kotlin Kotlin is a statically typed programming language Officially supported language by Google for android Core features of Kotlin…","timeToRead":5}},"pageContext":{"slug":"/blog/Introduction-to-Kotlin/","templatePath":"./src/templates/blog-post.js"}}}